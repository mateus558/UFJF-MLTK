# This is the "physical" (i.e. real) name of the library.
# The actual file name of the library built is constructed based on conventions
# of the native platform, such as lib<ENSEMBLE_TARGET>.a,
# lib<ENSEMBLE_TARGET>.dylib or <ENSEMBLE_TARGET>.lib.
set(ENSEMBLE_TARGET ${PROJECT_NAME}-ensemble)

# List of HPP (header) library files.
set(${ENSEMBLE_TARGET}_HDR
        include/ufjfmltk/ensemble/AdaBoostClassifier.hpp
        include/ufjfmltk/ensemble/AutoWeightedVoting.hpp
        include/ufjfmltk/ensemble/BaggingClassifier.hpp
        include/ufjfmltk/ensemble/Ensemble.hpp
        include/ufjfmltk/ensemble/kNNEnsemble.hpp
        include/ufjfmltk/ensemble/kNNEnsembleBagging.hpp
        include/ufjfmltk/ensemble/kNNEnsembleDSM.hpp
        include/ufjfmltk/ensemble/kNNEnsembleRSM.hpp
        include/ufjfmltk/ensemble/kNNEnsembleW.hpp
        include/ufjfmltk/ensemble/kNNEnsembleWPDSM.hpp
        include/ufjfmltk/ensemble/kNNEnsembleWPDSMLinear.hpp
        include/ufjfmltk/ensemble/kNNEnsembleWRSM.hpp
        include/ufjfmltk/ensemble/kNNEnsembleWSS.hpp
        include/ufjfmltk/ensemble/PerceptronCommittee.hpp
        include/ufjfmltk/ensemble/VotingClassifier.hpp
        )

# You can add an external dependency using the find_package() function call
# See: https://cmake.org/cmake/help/latest/command/find_package.html
# Note that the imported objects resulting from the find_package() depends upon
# the configuration files generated by the developer of the library.
# These imported objects can be either:
#  - variables that must be used to include directories and/or link libraries
#    with function calls like target_include_directories() and/or
#    target_link_libraries();
#  - a CMake target that must only be linked using target_link_libraries() and
#    CMake will take care of including and/or linking the appropriate
#    directories and/or libraries.
# See: https://cmake.org/cmake/help/latest/command/target_include_directories.html
# See: https://cmake.org/cmake/help/latest/command/target_link_libraries.html
# For example:
# find_package(FooPackage) may import either
#  - variables: FooPackage_INCLUDE_DIRS and FooPackage_LIBRARIES
#  - target: FooPackage::FooPackage
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../ufjfmltk-core/include")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../ufjfmltk-classifier/include")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../ufjfmltk-valid/include")
# Adds a library target called ${ENSEMBLE_TARGET} to be built from the
# source and header files listed in the command invocation.
add_library(${ENSEMBLE_TARGET} INTERFACE)

# Within this project, you can link to this library by just specifing the name
# of the target, i.e. ${ENSEMBLE_TARGET} = LibTemplateCMakeHeaderOnly. It is
# useful, however, to define an alias of this library with the scope of the
# exported library itself because (1) you will link against it with the exact
# same syntax of an imported library and (2) because names having a double-colon
# (::) are always treated as the name of either an alias or imported target. Any
# attempt to use such a name for a different target type will result in an error.
add_library(${PROJECT_NAME}::${ENSEMBLE_TARGET} ALIAS ${ENSEMBLE_TARGET})

# Specify include directories for both compilation and installation process.
# The $<INSTALL_PREFIX> generator expression is useful to ensure to create
# relocatable configuration files, see https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#creating-relocatable-packages
target_include_directories(${ENSEMBLE_TARGET} INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
        "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")

# If you used find_package() you need to use target_include_directories() and/or
# target_link_libraries(). As explained previously, depending on the imported
# objects, you may need to call either or both:
# - with imported variable:
#   target_include_directories(${ENSEMBLE_TARGET} ${FooPackage_INCLUDE_DIRS})
#   target_link_libraries(${ENSEMBLE_TARGET} ${FooPackage_LIBRARIES})
# - with imported target:
#   target_link_libraries(${ENSEMBLE_TARGET} FooPackage_LIBRARIES::FooPackage_LIBRARIES)

# Specify installation targets, typology and destination folders.
install(TARGETS ${ENSEMBLE_TARGET}
        EXPORT  ${PROJECT_NAME})

install(FILES ${${ENSEMBLE_TARGET}_HDR}
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/ufjfmltk/ensemble")

install(FILES include/ufjfmltk/Ensemble.hpp
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/ufjfmltk")

message(STATUS "Created target ${ENSEMBLE_TARGET} for export ${PROJECT_NAME}.")